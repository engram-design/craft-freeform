/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/cp/integrations/index.js":
/*!*************************************************!*\
  !*** ./src/components/cp/integrations/index.js ***!
  \*************************************************/
/***/ (function() {

eval("// eslint-disable no-undef\n$(function () {\n  var $classSelector = $('select#class');\n  $classSelector.on({\n    change: function change() {\n      var val = $(this).val().split('\\\\').join('');\n      $('div#settings-' + val).show().siblings().hide();\n    }\n  });\n  $classSelector.trigger('change');\n  var $name = $('#name');\n\n  if (!$name.val().length) {\n    $name.on({\n      keyup: function keyup() {\n        $('#handle').val(generateHandle($(this).val())).trigger('change');\n      }\n    });\n  }\n\n  var $returnUri = $('input.setting-return_uri');\n  var urlType = $('#integration-type').data('type');\n  $('#handle').on({\n    change: function change() {\n      var val = $(this).val();\n      var updatedUrl = Craft.getCpUrl('freeform/settings/' + urlType + '/' + val);\n      $returnUri.val(updatedUrl);\n    },\n    keyup: function keyup() {\n      $(this).trigger('change');\n    }\n  });\n  var $authChecker = $('#auth-checker');\n  var pendingStatusCheck = $('.pending-status-check', $authChecker);\n  var integrationId = pendingStatusCheck.data('id');\n  var type = pendingStatusCheck.data('type');\n\n  if (integrationId) {\n    var data = {\n      id: integrationId\n    };\n    data[Craft.csrfTokenName] = Craft.csrfTokenValue;\n    $.ajax({\n      url: Craft.getCpUrl('freeform/' + type + '/check'),\n      data: data,\n      type: 'post',\n      dataType: 'json',\n      success: function success(json) {\n        pendingStatusCheck.hide();\n\n        if (json.success) {\n          $('.authorized', $authChecker).show();\n        } else {\n          $('.not-authorized', $authChecker).show();\n\n          if (json.errors) {\n            var errors = json.errors;\n\n            if (typeof errors !== 'string') {\n              errors = errors.join('. ');\n            }\n\n            $('.not-authorized .errors', $authChecker).empty().text(errors);\n          }\n        }\n      }\n    });\n  }\n});\n\nfunction generateHandle(value) {\n  // Remove HTML tags\n  var handle = value.replace('/<(.*?)>/g', ''); // Remove inner-word punctuation\n\n  handle = handle.replace(/['\"‘’“”[\\](){}:]/g, ''); // Make it lowercase\n\n  handle = handle.toLowerCase(); // Convert extended ASCII characters to basic ASCII\n\n  handle = Craft.asciiString(handle); // Handle must start with a letter\n\n  handle = handle.replace(/^[^a-z]+/, ''); // Get the \"words\"\n\n  var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n  handle = ''; // Make it camelCase\n\n  for (var i = 0; i < words.length; i++) {\n    if (i === 0) {\n      handle += words[i];\n    } else {\n      handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n    }\n  }\n\n  return handle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZmYvc2NyaXB0cy8uL3NyYy9jb21wb25lbnRzL2NwL2ludGVncmF0aW9ucy9pbmRleC5qcz8wYjIzIl0sIm5hbWVzIjpbIiQiLCIkY2xhc3NTZWxlY3RvciIsIm9uIiwiY2hhbmdlIiwidmFsIiwic3BsaXQiLCJqb2luIiwic2hvdyIsInNpYmxpbmdzIiwiaGlkZSIsInRyaWdnZXIiLCIkbmFtZSIsImxlbmd0aCIsImtleXVwIiwiZ2VuZXJhdGVIYW5kbGUiLCIkcmV0dXJuVXJpIiwidXJsVHlwZSIsImRhdGEiLCJ1cGRhdGVkVXJsIiwiQ3JhZnQiLCJnZXRDcFVybCIsIiRhdXRoQ2hlY2tlciIsInBlbmRpbmdTdGF0dXNDaGVjayIsImludGVncmF0aW9uSWQiLCJ0eXBlIiwiaWQiLCJjc3JmVG9rZW5OYW1lIiwiY3NyZlRva2VuVmFsdWUiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwianNvbiIsImVycm9ycyIsImVtcHR5IiwidGV4dCIsInZhbHVlIiwiaGFuZGxlIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiYXNjaWlTdHJpbmciLCJ3b3JkcyIsImZpbHRlckFycmF5IiwiaSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBQSxDQUFDLENBQUMsWUFBWTtBQUNaLE1BQU1DLGNBQWMsR0FBR0QsQ0FBQyxDQUFDLGNBQUQsQ0FBeEI7QUFDQUMsRUFBQUEsY0FBYyxDQUFDQyxFQUFmLENBQWtCO0FBQ2hCQyxJQUFBQSxNQUFNLEVBQUUsa0JBQVk7QUFDbEIsVUFBTUMsR0FBRyxHQUFHSixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFJLEdBQVIsR0FBY0MsS0FBZCxDQUFvQixJQUFwQixFQUEwQkMsSUFBMUIsQ0FBK0IsRUFBL0IsQ0FBWjtBQUVBTixNQUFBQSxDQUFDLENBQUMsa0JBQWtCSSxHQUFuQixDQUFELENBQ0dHLElBREgsR0FFR0MsUUFGSCxHQUdHQyxJQUhI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TUFBTSxJQUFJSSxLQUFLLENBQUNFLENBQUQsQ0FBTCxDQUFTQyxNQUFULENBQWdCLENBQWhCLEVBQW1CQyxXQUFuQixLQUFtQ0osS0FBSyxDQUFDRSxDQUFELENBQUwsQ0FBU0csTUFBVCxDQUFnQixDQUFoQixDQUE3QztBQUNEO0FBQ0Y7O0FBRUQsU0FBT1QsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUgbm8tdW5kZWZcbiQoZnVuY3Rpb24gKCkge1xuICBjb25zdCAkY2xhc3NTZWxlY3RvciA9ICQoJ3NlbGVjdCNjbGFzcycpO1xuICAkY2xhc3NTZWxlY3Rvci5vbih7XG4gICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB2YWwgPSAkKHRoaXMpLnZhbCgpLnNwbGl0KCdcXFxcJykuam9pbignJyk7XG5cbiAgICAgICQoJ2RpdiNzZXR0aW5ncy0nICsgdmFsKVxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zaWJsaW5ncygpXG4gICAgICAgIC5oaWRlKCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgJGNsYXNzU2VsZWN0b3IudHJpZ2dlcignY2hhbmdlJyk7XG5cbiAgY29uc3QgJG5hbWUgPSAkKCcjbmFtZScpO1xuICBpZiAoISRuYW1lLnZhbCgpLmxlbmd0aCkge1xuICAgICRuYW1lLm9uKHtcbiAgICAgIGtleXVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyNoYW5kbGUnKVxuICAgICAgICAgIC52YWwoZ2VuZXJhdGVIYW5kbGUoJCh0aGlzKS52YWwoKSkpXG4gICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0ICRyZXR1cm5VcmkgPSAkKCdpbnB1dC5zZXR0aW5nLXJldHVybl91cmknKTtcbiAgY29uc3QgdXJsVHlwZSA9ICQoJyNpbnRlZ3JhdGlvbi10eXBlJykuZGF0YSgndHlwZScpO1xuXG4gICQoJyNoYW5kbGUnKS5vbih7XG4gICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB2YWwgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgY29uc3QgdXBkYXRlZFVybCA9IENyYWZ0LmdldENwVXJsKCdmcmVlZm9ybS9zZXR0aW5ncy8nICsgdXJsVHlwZSArICcvJyArIHZhbCk7XG5cbiAgICAgICRyZXR1cm5VcmkudmFsKHVwZGF0ZWRVcmwpO1xuICAgIH0sXG4gICAga2V5dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgJGF1dGhDaGVja2VyID0gJCgnI2F1dGgtY2hlY2tlcicpO1xuICBjb25zdCBwZW5kaW5nU3RhdHVzQ2hlY2sgPSAkKCcucGVuZGluZy1zdGF0dXMtY2hlY2snLCAkYXV0aENoZWNrZXIpO1xuICBjb25zdCBpbnRlZ3JhdGlvbklkID0gcGVuZGluZ1N0YXR1c0NoZWNrLmRhdGEoJ2lkJyk7XG4gIGNvbnN0IHR5cGUgPSBwZW5kaW5nU3RhdHVzQ2hlY2suZGF0YSgndHlwZScpO1xuXG4gIGlmIChpbnRlZ3JhdGlvbklkKSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGlkOiBpbnRlZ3JhdGlvbklkLFxuICAgIH07XG5cbiAgICBkYXRhW0NyYWZ0LmNzcmZUb2tlbk5hbWVdID0gQ3JhZnQuY3NyZlRva2VuVmFsdWU7XG5cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOiBDcmFmdC5nZXRDcFVybCgnZnJlZWZvcm0vJyArIHR5cGUgKyAnL2NoZWNrJyksXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHBlbmRpbmdTdGF0dXNDaGVjay5oaWRlKCk7XG5cbiAgICAgICAgaWYgKGpzb24uc3VjY2Vzcykge1xuICAgICAgICAgICQoJy5hdXRob3JpemVkJywgJGF1dGhDaGVja2VyKS5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCgnLm5vdC1hdXRob3JpemVkJywgJGF1dGhDaGVja2VyKS5zaG93KCk7XG5cbiAgICAgICAgICBpZiAoanNvbi5lcnJvcnMpIHtcbiAgICAgICAgICAgIGxldCBlcnJvcnMgPSBqc29uLmVycm9ycztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3JzICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuam9pbignLiAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCgnLm5vdC1hdXRob3JpemVkIC5lcnJvcnMnLCAkYXV0aENoZWNrZXIpLmVtcHR5KCkudGV4dChlcnJvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSGFuZGxlKHZhbHVlKSB7XG4gIC8vIFJlbW92ZSBIVE1MIHRhZ3NcbiAgbGV0IGhhbmRsZSA9IHZhbHVlLnJlcGxhY2UoJy88KC4qPyk+L2cnLCAnJyk7XG5cbiAgLy8gUmVtb3ZlIGlubmVyLXdvcmQgcHVuY3R1YXRpb25cbiAgaGFuZGxlID0gaGFuZGxlLnJlcGxhY2UoL1snXCLigJjigJnigJzigJ1bXFxdKCl7fTpdL2csICcnKTtcblxuICAvLyBNYWtlIGl0IGxvd2VyY2FzZVxuICBoYW5kbGUgPSBoYW5kbGUudG9Mb3dlckNhc2UoKTtcblxuICAvLyBDb252ZXJ0IGV4dGVuZGVkIEFTQ0lJIGNoYXJhY3RlcnMgdG8gYmFzaWMgQVNDSUlcbiAgaGFuZGxlID0gQ3JhZnQuYXNjaWlTdHJpbmcoaGFuZGxlKTtcblxuICAvLyBIYW5kbGUgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyXG4gIGhhbmRsZSA9IGhhbmRsZS5yZXBsYWNlKC9eW15hLXpdKy8sICcnKTtcblxuICAvLyBHZXQgdGhlIFwid29yZHNcIlxuICBjb25zdCB3b3JkcyA9IENyYWZ0LmZpbHRlckFycmF5KGhhbmRsZS5zcGxpdCgvW15hLXowLTldKy8pKTtcblxuICBoYW5kbGUgPSAnJztcblxuICAvLyBNYWtlIGl0IGNhbWVsQ2FzZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIGhhbmRsZSArPSB3b3Jkc1tpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlICs9IHdvcmRzW2ldLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZHNbaV0uc3Vic3RyKDEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBoYW5kbGU7XG59XG4iXSwiZmlsZSI6Ii4vc3JjL2NvbXBvbmVudHMvY3AvaW50ZWdyYXRpb25zL2luZGV4LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/cp/integrations/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/components/cp/integrations/index.js"]();
/******/ 	
/******/ })()
;